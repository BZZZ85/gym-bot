from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
import asyncio
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import matplotlib.pyplot as plt
from io import BytesIO
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import re
from aiogram import F
from db import create_pool, add_record, get_user_exercises, get_user_stats, delete_user_exercise, get_user_history


# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
API_TOKEN = "8442431194:AAHqrL5Uv-boQHXf_68f6or3i1pZmJDMqy0"
DATABASE_URL=psql 'postgresql://neondb_owner:npg_0eRPsTi9tJAj@ep-winter-snow-ab9o1qut-pooler.eu-west-2.aws.neon.tech/neondb?sslmode=require&channel_binding=require'


# ===== FSM =====
storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=storage)
scheduler = AsyncIOScheduler()

class ProgressStates(StatesGroup):
    waiting_for_exercise = State()

class AddApproachStates(StatesGroup):
    waiting_for_exercise = State()
    waiting_for_new_exercise = State()
    waiting_for_sets = State()
    waiting_for_reps = State()
    waiting_for_weights = State()

class SearchStates(StatesGroup):
    waiting_for_exercise = State()

class ReminderStates(StatesGroup):
    waiting_for_reminder = State()
class DeleteExerciseStates(StatesGroup):
    waiting_for_exercise = State()




@dp.message(F.text == "‚Ü© –í –º–µ–Ω—é")
async def back_to_main(message: Message, state: FSMContext):
    await state.clear()  # –æ—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await start(message, state)  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

# ===== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =====
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥"), KeyboardButton(text="‚èÆ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—à–ª—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")],
        [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
        [KeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), KeyboardButton(text="üîÑ –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞")]
    ],
    resize_keyboard=True
)

# ===== –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø: —Ä–∞–±–æ—Ç–∞ —Å Google Sheets =====
def load_reminders():
    try:
        reminders_sheet = client.open(SPREADSHEET_NAME).worksheet("Reminders")
        return reminders_sheet.get_all_records()
    except gspread.WorksheetNotFound:
        reminders_sheet = client.open(SPREADSHEET_NAME).add_worksheet(title="Reminders", rows="100", cols="3")
        reminders_sheet.append_row(["UserID", "Days", "Time"])
        return []

def add_reminder(user_id, days, time):
    reminders_sheet = client.open(SPREADSHEET_NAME).worksheet("Reminders")
    reminders_sheet.append_row([user_id, days, time])

def remove_reminders(user_id):
    reminders_sheet = client.open(SPREADSHEET_NAME).worksheet("Reminders")
    all_rows = reminders_sheet.get_all_values()
    new_rows = [row for row in all_rows if not row or row[0] != str(user_id)]
    reminders_sheet.clear()
    reminders_sheet.append_row(["UserID", "Days", "Time"])
    for row in new_rows[1:]:
        reminders_sheet.append_row(row)

async def send_reminder(user_id, text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!"):
    try:
        await bot.send_message(user_id, text)
    except:
        pass

def schedule_all_reminders():
    scheduler.remove_all_jobs()
    reminders = load_reminders()
    days_map = {"–ø–Ω": "mon", "–≤—Ç": "tue", "—Å—Ä": "wed", "—á—Ç": "thu",
                "–ø—Ç": "fri", "—Å–±": "sat", "–≤—Å": "sun"}
    for r in reminders:
        user_id = str(r["UserID"])
        time_str = r["Time"]
        day_str = r["Days"]

        match = re.match(r"(\d{1,2}):(\d{2})", time_str)
        if not match:
            continue
        hour, minute = int(match.group(1)), int(match.group(2))
        day_list = [days_map[d.strip().lower()] for d in day_str.split(",") if d.strip().lower() in days_map]

        for d in day_list:
            scheduler.add_job(send_reminder, "cron", day_of_week=d, hour=hour, minute=minute, args=[user_id])

# ===== –ú–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π =====
@dp.message(lambda m: m.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def reminders_menu(message: Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
            [KeyboardButton(text="üìú –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
            [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
            [KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ú–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:", reply_markup=kb)

@dp.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def add_reminder_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ü–Ω, –°—Ä, –ü—Ç 19:00")
    await state.set_state(ReminderStates.waiting_for_reminder)

@dp.message(ReminderStates.waiting_for_reminder)
async def save_reminder(message: Message, state: FSMContext):
    if message.text.strip() == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return
    user_id = str(message.from_user.id)
    text = message.text.strip()
    try:
        parts = text.split()
        if len(parts) < 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        days = " ".join(parts[:-1])
        time = parts[-1]
        if not re.match(r"^\d{1,2}:\d{2}$", time):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        add_reminder(user_id, days, time)
        schedule_all_reminders()
        await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {days} –≤ {time}", reply_markup=main_kb)
    except:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: –ü–Ω, –°—Ä, –ü—Ç 19:00")
    await state.clear()

@dp.message(lambda m: m.text == "üìú –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def my_reminders(message: Message):
    user_id = str(message.from_user.id)
    reminders = load_reminders()
    user_reminders = [f"{r['Days']} –≤ {r['Time']}" for r in reminders if str(r['UserID']) == user_id]
    if not user_reminders:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=main_kb)
    else:
        msg = "‚è∞ –¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n" + "\n".join(user_reminders)
        await message.answer(msg, reply_markup=main_kb)

@dp.message(lambda m: m.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def delete_all_reminders(message: Message):
    user_id = str(message.from_user.id)
    remove_reminders(user_id)
    schedule_all_reminders()
    await message.answer("‚ùå –í—Å–µ —Ç–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.", reply_markup=main_kb)

# ===== –†–∞–±–æ—Ç–∞ —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ =====
def get_exercises():
    try:
        exercises_sheet = client.open(SPREADSHEET_NAME).worksheet("Exercises")
        return [x.strip() for x in exercises_sheet.col_values(1) if x.strip()]
    except gspread.WorksheetNotFound:
        exercises_sheet = client.open(SPREADSHEET_NAME).add_worksheet(title="Exercises", rows="100", cols="1")
        default = ["–ñ–∏–º –ª—ë–∂–∞", "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è", "–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞"]
        for ex in default:
            exercises_sheet.append_row([ex])
        return default

def add_exercise_to_sheet(ex_name):
    exercises_sheet = client.open(SPREADSHEET_NAME).worksheet("Exercises")
    exercises_sheet.append_row([ex_name])

def user_exercises_keyboard(user_id, with_custom=False, for_delete=False):
    records = get_all_records()
    user_records = [r for r in records if r['userid'] == str(user_id)]
    exercises_set = sorted({r['exercise'] for r in user_records if r['exercise']})

    kb_buttons = [[KeyboardButton(text=ex)] for ex in exercises_set]

    if with_custom:
        kb_buttons.append([KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")])
    if for_delete:
        kb_buttons.append([KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")])

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    kb_buttons.append([KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")])

    return ReplyKeyboardMarkup(
        keyboard=kb_buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )

@dp.message(DeleteExerciseStates.waiting_for_exercise)
async def process_delete_exercise(message: Message, state: FSMContext):
    exercise_to_delete = message.text.strip()
    user_id = str(message.from_user.id)

    if exercise_to_delete == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return

    records = sheet.get_all_records()
    rows_to_keep = []

    for i, r in enumerate(records, start=2):  # start=2 –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ Google Sheets 1-—è —Å—Ç—Ä–æ–∫–∞ ‚Äì –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if not (str(r.get("UserID")) == user_id and r.get("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ") == exercise_to_delete):
            rows_to_keep.append([r.get("UserID"), r.get("Username"), r.get("–î–∞—Ç–∞"),
                                 r.get("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"), r.get("–ü–æ–¥—Ö–æ–¥—ã"), r.get("–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"),
                                 r.get("–í–µ—Å"), r.get("–û–±—ä—ë–º")])

    # –æ—á–∏—â–∞–µ–º –ª–∏—Å—Ç –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏
    sheet.clear()
    sheet.append_row(["UserID", "Username", "–î–∞—Ç–∞", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", "–ü–æ–¥—Ö–æ–¥—ã", "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è", "–í–µ—Å", "–û–±—ä—ë–º"])
    for row in rows_to_keep:
        sheet.append_row(row)

    await message.answer(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ '{exercise_to_delete}' —É–¥–∞–ª–µ–Ω–æ!", reply_markup=main_kb)
    await state.clear()


@dp.message(lambda m: m.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
async def delete_exercise_menu(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    kb = user_exercises_delete_keyboard(user_id)
    if len(kb.keyboard) == 1:  # —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "‚Ü© –í –º–µ–Ω—é"
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_kb)
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=kb)
    # –ó–¥–µ—Å—å –∏—Å–ø—Ä–∞–≤–ª—è–µ–º:
    await state.set_state(DeleteExerciseStates.waiting_for_exercise)
def user_exercises_delete_keyboard(user_id):
    records = get_all_records()
    user_records = [r for r in records if r['userid'] == str(user_id)]
    exercises_set = set(r['exercise'] for r in user_records if r['exercise'])

    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=ex)] for ex in exercises_set] +
                 [[KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return kb


@dp.message(DeleteExerciseStates.waiting_for_exercise)
async def delete_exercise(message: Message, state: FSMContext):
    exercise_to_delete = message.text.strip()
    if exercise_to_delete == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return
    
    user_id = str(message.from_user.id)
    all_rows = sheet.get_all_records()
    
    # –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å (–±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è)
    new_rows = [
        [r['UserID'], r['Username'], r['–î–∞—Ç–∞'], r['–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ'], r['–ü–æ–¥—Ö–æ–¥—ã'], r['–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è'], r['–í–µ—Å'], r['–û–±—ä—ë–º']]
        for r in all_rows
        if not (r['UserID'] == user_id and r['–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ'] == exercise_to_delete)
    ]

    # –û—á–∏—Å—Ç–∏—Ç—å –ª–∏—Å—Ç –∏ –∑–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
    sheet.clear()
    sheet.append_row(["UserID", "Username", "–î–∞—Ç–∞", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", "–ü–æ–¥—Ö–æ–¥—ã", "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è", "–í–µ—Å", "–û–±—ä—ë–º"])
    for row in new_rows:
        sheet.append_row(row)
    
    await message.answer(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ '{exercise_to_delete}' —É–¥–∞–ª–µ–Ω–æ.", reply_markup=main_kb)
    await state.clear()


# ===== –£—Ç–∏–ª–∏—Ç—ã =====
def normalize(s: str):
    return str(s or "").strip().lower().replace("—ë", "–µ")

def get_all_records():
    all_records = sheet.get_all_records()
    parsed = []
    for r in all_records:
        parsed.append({
            'userid': str(r.get('UserID','')).strip(),
            'username': str(r.get('Username','')).strip(),
            'date': str(r.get('–î–∞—Ç–∞','')).strip(),
            'exercise': str(r.get('–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ','')).strip(),
            'approach': str(r.get('–ü–æ–¥—Ö–æ–¥—ã','')).strip(),
            'reps': str(r.get('–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è','')).strip(),
            'weight': str(r.get('–í–µ—Å','')).strip(),
            'volume': str(r.get('–û–±—ä—ë–º','')).strip()
        })
    return parsed

# ===== /start =====
@dp.message(CommandStart())
async def start(message: Message, state: FSMContext = None):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)
    if state:
        await state.clear()

# ===== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∞ =====
@dp.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥")
async def start_add_approach(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_records = [r for r in get_all_records() if r['userid'] == str(message.from_user.id)]
    user_exercises = {r['exercise'] for r in user_records if r['exercise']}
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text=ex)] for ex in user_exercises
    ] + [[KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
         [KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ:", reply_markup=kb)
    await state.set_state(AddApproachStates.waiting_for_exercise)

@dp.message(AddApproachStates.waiting_for_exercise)
async def process_exercise(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_records = [r for r in get_all_records() if r['userid'] == str(message.from_user.id)]
    user_exercises = {r['exercise'] for r in user_records if r['exercise']}

    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
        await state.set_state(AddApproachStates.waiting_for_new_exercise)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –µ—Å—Ç—å –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
    if text not in user_exercises:
        await message.answer("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ.")
        return

    await state.update_data(exercise=text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤?")
    await state.set_state(AddApproachStates.waiting_for_sets)

@dp.message(AddApproachStates.waiting_for_new_exercise)
async def add_new_exercise(message: types.Message, state: FSMContext):
    if message.text.strip() == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return
    
    new_ex = message.text.strip()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ
    if new_ex in get_exercises():
        await message.answer("–≠—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.")
        await state.set_state(AddApproachStates.waiting_for_exercise)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç
    add_exercise_to_sheet(new_ex)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(exercise=new_ex)
    await message.answer(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ '{new_ex}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n–°–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤?")
    await state.set_state(AddApproachStates.waiting_for_sets)

# ===== –ò—Å—Ç–æ—Ä–∏—è =====
@dp.message(lambda m: m.text.strip() == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def history(message: Message):
    records = get_all_records()
    user_id = str(message.from_user.id)
    user_records = [r for r in records if r['userid'] == user_id]
    if not user_records:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=main_kb)
        return
    user_records.sort(key=lambda x: x['date'], reverse=True)
    last_records = user_records[:10]
    msg_text = "üìä –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n"
    for r in last_records:
        approaches = int(r['approach'])
        reps_list = r['reps'].split()
        weights_list = r['weight'].split()
        msg_text += f"{r['date']} ‚Äî {r['exercise']}:\n"
        for i in range(approaches):
            rep = reps_list[i] if i < len(reps_list) else reps_list[-1]
            weight = weights_list[i] if i < len(weights_list) else weights_list[-1]
            msg_text += f"{i+1}Ô∏è‚É£ {rep} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π ‚Äî {weight} –∫–≥\n"
        msg_text += "‚Äî" * 20 + "\n"
    await message.answer(msg_text, reply_markup=main_kb)

# ===== –ü—Ä–æ–≥—Ä–µ—Å—Å =====
@dp.message(lambda m: m.text == "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def progress(message: Message, state: FSMContext):
    kb = user_exercises_keyboard(message.from_user.id, with_custom=False)
    if not kb.keyboard[:-1]:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.", reply_markup=main_kb)
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:", reply_markup=kb)
    await state.set_state(ProgressStates.waiting_for_exercise)

@dp.message(ProgressStates.waiting_for_exercise)
async def send_graph(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    exercise_input = message.text.strip()
    if exercise_input == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return
    records = get_all_records()
    user_records = [r for r in records if r['userid'] == user_id]
    ex_records = [r for r in user_records if normalize(r.get("exercise","")) == normalize(exercise_input)]
    if not ex_records:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.", reply_markup=main_kb)
        await state.clear()
        return
    dates, weights = [], []
    for r in ex_records:
        w = r.get("weight","").strip()
        d = r.get("date","").strip()
        if w and d:
            try:
                weights_list = [float(x) for x in w.split()]
                weights.append(sum(weights_list)/len(weights_list))
                dates.append(d)
            except:
                continue
    if not weights:
        await message.answer("–ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.", reply_markup=main_kb)
        await state.clear()
        return
    plt.figure(figsize=(8,4))
    plt.plot(dates, weights, marker="o")
    plt.title(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ {exercise_input}")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å (–∫–≥)")
    plt.grid(True)
    plt.xticks(rotation=45)
    plt.tight_layout()
    buf = BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    plt.close()
    file = types.BufferedInputFile(buf.read(), filename="progress.png")
    await message.answer_photo(photo=file, reply_markup=main_kb)
    await state.clear()

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
@dp.message(lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_choose(message: Message, state: FSMContext):
    kb = user_exercises_keyboard(message.from_user.id, with_custom=False)
    
    # –≤–º–µ—Å—Ç–æ kb.add(...) –¥–µ–ª–∞–µ–º —Ç–∞–∫:
    buttons = kb.keyboard  # —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
    buttons.append([KeyboardButton(text="–í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")])
    
    kb = ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=kb)
    await state.set_state(SearchStates.waiting_for_exercise)


@dp.message(SearchStates.waiting_for_exercise)
async def stats_exercise(message: Message, state: FSMContext):
    exercise_input = message.text.strip()
    if exercise_input == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return
    user_id = str(message.from_user.id)
    records = get_all_records()
    user_records = [r for r in records if r['userid'] == user_id]
    if not user_records:
        await message.answer("‚ùó –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=main_kb)
        await state.clear()
        return
    msg_parts = []
    if exercise_input == "–í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è":
        grouped = {}
        for r in user_records:
            ex = r.get("exercise","").strip()
            key = normalize(ex)
            if key not in grouped:
                grouped[key] = {"name": ex, "weights": [], "volumes": []}
            if r['weight']:
                grouped[key]["weights"].extend([float(x) for x in r['weight'].split()])
            if r['volume']:
                grouped[key]["volumes"].append(float(r['volume']))
        for g in grouped.values():
            msg = f"üèãÔ∏è {g['name']}:\n"
            if g['weights']:
                msg += f"   –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å: {sum(g['weights'])/len(g['weights']):.1f} –∫–≥\n"
                msg += f"   –õ–∏—á–Ω—ã–π —Ä–µ–∫–æ—Ä–¥: {max(g['weights']):.1f} –∫–≥\n"
            if g['volumes']:
                msg += f"   –°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º: {sum(g['volumes'])/len(g['volumes']):.1f} –∫–≥\n"
                msg += f"   –†–µ–∫–æ—Ä–¥–Ω—ã–π –æ–±—ä—ë–º: {max(g['volumes']):.1f} –∫–≥\n"
            msg += "‚Äî"*20 + "\n"
            msg_parts.append(msg)
    else:
        ex_records = [r for r in user_records if normalize(r['exercise']) == normalize(exercise_input)]
        if not ex_records:
            await message.answer(f"–ó–∞–ø–∏—Å–µ–π –ø–æ '{exercise_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_kb)
            await state.clear()
            return
        weights, volumes = [], []
        for r in ex_records:
            if r['weight']:
                weights.extend([float(x) for x in r['weight'].split()])
            if r['volume']:
                volumes.append(float(r['volume']))
        msg = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {exercise_input}:\n"
        if weights:
            msg += f"   –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å: {sum(weights)/len(weights):.1f} –∫–≥\n"
            msg += f"   –õ–∏—á–Ω—ã–π —Ä–µ–∫–æ—Ä–¥: {max(weights):.1f} –∫–≥\n"
        if volumes:
            msg += f"   –°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º: {sum(volumes)/len(volumes):.1f} –∫–≥\n"
            msg += f"   –†–µ–∫–æ—Ä–¥–Ω—ã–π –æ–±—ä—ë–º: {max(volumes):.1f} –∫–≥\n"
        msg_parts.append(msg)
    for part in msg_parts:
        await message.answer(part)
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é:", reply_markup=main_kb)
    await state.clear()
# ===== –†–µ—Å—Ç–∞—Ä—Ç =====
@dp.message(lambda m: m.text == "üîÑ –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞")
async def restart_bot(message: Message):
    await message.answer("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
    await start(message)

# ===== –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ =====
@dp.message(lambda m: m.text == "‚èÆ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—à–ª—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def use_last(message: Message, state: FSMContext):
    records = get_all_records()
    user_id = str(message.from_user.id)
    user_records = [r for r in records if r['userid']==user_id]
    if not user_records:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—à–ª—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", reply_markup=main_kb)
        return
    user_records.sort(key=lambda x: x['date'], reverse=True)
    last = user_records[0]
    await message.answer(
        f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {last['exercise']}, "
        f"–ø–æ–¥—Ö–æ–¥—ã {last['approach']}, "
        f"–ø–æ–≤—Ç–æ—Ä—ã {last['reps']}, "
        f"–≤–µ—Å {last['weight']}",
        reply_markup=main_kb
    )

# ===== –ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π =====
@dp.message(lambda m: m.text == "üîç –ù–∞–π—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
async def find_exercise(message: Message, state: FSMContext):
    kb = user_exercises_keyboard(message.from_user.id, with_custom=False)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é:",
        reply_markup=kb
    )
    await state.set_state(SearchStates.waiting_for_exercise)

@dp.message(SearchStates.waiting_for_exercise)
async def search_exercise(message: Message, state: FSMContext):
    exercise_input = message.text.strip()
    if exercise_input == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return

    user_id = str(message.from_user.id)
    records = get_all_records()
    user_records = [r for r in records if r['userid'] == user_id]

    if not user_records:
        await message.answer("‚ùó –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=main_kb)
        await state.clear()
        return

    ex_records = [r for r in user_records if normalize(r['exercise']) == normalize(exercise_input)]
    if not ex_records:
        await message.answer(f"–ó–∞–ø–∏—Å–µ–π –ø–æ '{exercise_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_kb)
        await state.clear()
        return

    # ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
    weights, volumes = [], []
    for r in ex_records:
        if r['weight']:
            weights.extend([float(x) for x in r['weight'].split()])
        if r['volume']:
            volumes.append(float(r['volume']))

    stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {exercise_input}:\n"
    if weights:
        stats_text += f"   –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å: {sum(weights)/len(weights):.1f} –∫–≥\n"
        stats_text += f"   –õ–∏—á–Ω—ã–π —Ä–µ–∫–æ—Ä–¥: {max(weights):.1f} –∫–≥\n"
    if volumes:
        stats_text += f"   –°—Ä–µ–¥–Ω–∏–π –æ–±—ä—ë–º: {sum(volumes)/len(volumes):.1f} –∫–≥\n"
        stats_text += f"   –†–µ–∫–æ—Ä–¥–Ω—ã–π –æ–±—ä—ë–º: {max(volumes):.1f} –∫–≥\n"

    await message.answer(stats_text)

    # ===== –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ =====
    dates, avg_weights = [], []
    for r in ex_records:
        w = r.get("weight","").strip()
        d = r.get("date","").strip()
        if w and d:
            try:
                weights_list = [float(x) for x in w.split()]
                avg_weights.append(sum(weights_list)/len(weights_list))
                dates.append(d)
            except:
                continue

    if avg_weights:
        plt.figure(figsize=(8,4))
        plt.plot(dates, avg_weights, marker="o")
        plt.title(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ {exercise_input}")
        plt.xlabel("–î–∞—Ç–∞")
        plt.ylabel("–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å (–∫–≥)")
        plt.grid(True)
        plt.xticks(rotation=45)
        plt.tight_layout()
        buf = BytesIO()
        plt.savefig(buf, format="png")
        buf.seek(0)
        plt.close()
        file = types.BufferedInputFile(buf.read(), filename="progress.png")
        await message.answer_photo(photo=file)

    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é:", reply_markup=main_kb)
    await state.clear()

# ===== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =====
async def main():
    schedule_all_reminders()  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ Google Sheets
    scheduler.start()          # —Å—Ç–∞—Ä—Ç—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
