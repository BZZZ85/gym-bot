import os
import asyncio
import pytz
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
import asyncpg
from dotenv import load_dotenv
from collections import defaultdict
from datetime import datetime
from itertools import groupby
import matplotlib.pyplot as plt
import io
from datetime import datetime
from aiogram import types
from aiogram.types import FSInputFile
from datetime import datetime, timedelta, time
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π .env —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
if os.path.exists("ton.env"):
    load_dotenv("ton.env")

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Railway Variables –∏–ª–∏ ton.env)
print("DEBUG: available env keys:", sorted(k for k in os.environ.keys() if "BOT" in k or "TOKEN" in k))


BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å Variables –≤ Railway –∏–ª–∏ ton.env.")
if not DATABASE_URL:
    raise ValueError("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å Variables –≤ Railway –∏–ª–∏ ton.env.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

db_pool = None
async def create_db_pool():
    global db_pool
    db_pool = await asyncpg.create_pool(DATABASE_URL)

# ===== FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è =====
class AddApproachStates(StatesGroup):
    waiting_for_exercise = State()
    waiting_for_new_exercise = State()
    waiting_for_sets = State()
    waiting_for_reps = State()
    waiting_for_weight = State() 
class DeleteExerciseStates(StatesGroup):
    waiting_for_exercise_to_delete = State()
class ReminderState(StatesGroup):
    waiting_for_time = State()




# ===== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü =====
async def init_db():
    global db_pool
    db_pool = await asyncpg.create_pool(DATABASE_URL)

    async with db_pool.acquire() as conn:
        # ===== –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π =====
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                username TEXT
            )
        """)
        
        # ===== –¢–∞–±–ª–∏—Ü–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π =====
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS exercises (
                user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
                exercise TEXT,
                approach INT,
                reps TEXT,
                weight TEXT,
                created_at TIMESTAMP DEFAULT now()
            )
        """)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É id, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        await conn.execute("""
            ALTER TABLE exercises 
            ADD COLUMN IF NOT EXISTS id SERIAL PRIMARY KEY;
        """)

        # ===== –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ =====
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS records (
                user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
                exercise TEXT,
                sets INT,
                reps TEXT,
                date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É weight, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        await conn.execute("""
            ALTER TABLE records 
            ADD COLUMN IF NOT EXISTS weight TEXT;
        """)
        # ===== –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π =====
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS reminders (
            id SERIAL PRIMARY KEY,
            user_id BIGINT NOT NULL,
            reminder_time TIMESTAMP NOT NULL,
            text TEXT DEFAULT 'üèãÔ∏è –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! –ù–µ –∑–∞–±—É–¥—å –ø–æ–∑–∞–Ω–∏–º–∞—Ç—å—Å—è üí™',
            enabled BOOLEAN DEFAULT TRUE
    );
""")

        


        await conn.execute("ALTER TABLE records ADD COLUMN IF NOT EXISTS weight TEXT;")


# ===== –§—É–Ω–∫—Ü–∏—è –≤—Å—Ç–∞–≤–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –ë–î —Å –≤–µ—Å–æ–º =====
async def add_exercise_to_db(user_id, exercise_text, approach=1, reps="", weights=None):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    weights: —Å–ø–∏—Å–æ–∫ –≤–µ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
    """
    async with db_pool.acquire() as conn:
        exists = await conn.fetchrow(
            "SELECT id FROM exercises WHERE user_id=$1 AND exercise=$2",
            user_id, exercise_text.strip()
        )
        if exists:
            # –ï—Å–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å, –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å reps –∏ weights
            await conn.execute(
                "UPDATE exercises SET approach=$1, reps=$2, weight=$3 WHERE user_id=$4 AND exercise=$5",
                approach, reps, " ".join(map(str, weights)) if weights else None, user_id, exercise_text.strip()
            )
            return

        await conn.execute(
            """
            INSERT INTO exercises (user_id, exercise, approach, reps, weight)
            VALUES ($1, $2, $3, $4, $5)
            """,
            user_id, exercise_text.strip(), approach, reps, " ".join(map(str, weights)) if weights else None
        )

def parse_exercise_input(text: str):
    """
    –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: "–ñ–∏–º –ª–µ–∂–∞ 3 10 12 15 60"
    –§–æ—Ä–º–∞—Ç: <–Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è> <–ø–æ–¥—Ö–æ–¥—ã> <–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª> <–≤–µ—Å>
    """
    parts = text.strip().split()
    if len(parts) < 4:
        return None
    try:
        weight = float(parts[-1])           # –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî –≤–µ—Å
        approach = int(parts[-(len(parts)-2)])  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤
        reps = " ".join(parts[-(len(parts)-2)+1:-1])  # –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        exercise_text = " ".join(parts[:-(len(parts)-2)])  # –Ω–∞–∑–≤–∞–Ω–∏–µ
    except ValueError:
        return None
    return exercise_text, approach, reps, weight


# ===== FSM-—Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è =====
@dp.message(AddApproachStates.waiting_for_new_exercise)
async def process_new_exercise(message: types.Message, state: FSMContext):
    text = message.text.strip()
    user_id = message.from_user.id

    if text == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ –ë–î
    await add_exercise_to_db(user_id, text)

    await state.update_data(exercise=text)
    await message.answer(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

    await ask_for_sets(message, state)

# ===== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =====
def main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
            [KeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), KeyboardButton(text="üîÑ –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞")]
        ],
        resize_keyboard=True
    )

# ===== –†–∞–±–æ—Ç–∞ —Å –ë–î =====
async def add_user(user_id, username):
    global db_pool  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    async with db_pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO users (user_id, username)
            VALUES ($1, $2)
            ON CONFLICT (user_id) DO NOTHING
            """,
            user_id,
            username
        )
        


async def get_exercises(user_id):
    global db_pool
    async with db_pool.acquire() as conn:
        rows = await conn.fetch("SELECT exercise FROM exercises WHERE user_id=$1", user_id)
        return [r['exercise'] for r in rows]

async def add_exercise(user_id, exercise):
    async with db_pool.acquire() as conn:
        await conn.execute(
            "INSERT INTO exercises (user_id, exercise) VALUES ($1, $2)",
            user_id,
            exercise
        )


async def save_record(user_id, exercise, sets, reps_list, weights_list=None):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏ –∏ –≤–µ—Å–∞–º–∏ –ø–æ –ø–æ–¥—Ö–æ–¥–∞–º.
    """
    reps_str = " ".join(map(str, reps_list))
    
    # –ï—Å–ª–∏ –≤–µ—Å–∞ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if weights_list:
        # –ï—Å–ª–∏ –≤–µ—Å–æ–≤ –º–µ–Ω—å—à–µ —á–µ–º –ø–æ–≤—Ç–æ—Ä–æ–≤, –¥—É–±–ª–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
        if len(weights_list) < len(reps_list):
            weights_list = weights_list + [weights_list[-1]] * (len(reps_list) - len(weights_list))
        weight_str = " ".join(map(str, weights_list))
    else:
        weight_str = None

    async with db_pool.acquire() as conn:
        await conn.execute(
            "INSERT INTO records (user_id, exercise, sets, reps, weight) VALUES ($1, $2, $3, $4, $5)",
            user_id, exercise, sets, reps_str, weight_str
        )

async def get_user_records(user_id):
    global db_pool
    async with db_pool.acquire() as conn:
        rows = await conn.fetch(
            "SELECT exercise, sets, reps, weight, date FROM records WHERE user_id=$1 ORDER BY date DESC LIMIT 10",
            user_id
        )
        return rows


# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ =====
@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext = None):
    await add_user(message.from_user.id, message.from_user.username)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb())
    if state:
        await state.clear()

# ===== –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥ =====


def sets_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="1Ô∏è‚É£"), KeyboardButton(text="2Ô∏è‚É£"), KeyboardButton(text="3Ô∏è‚É£")],
            [KeyboardButton(text="4Ô∏è‚É£"), KeyboardButton(text="5Ô∏è‚É£")],
            [KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
# ===== –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ –ë–î =====
async def delete_exercise_from_db(user_id: int, exercise: str):
    """
    –£–¥–∞–ª—è–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã exercises.
    """
    async with db_pool.acquire() as conn:
        await conn.execute(
            "DELETE FROM exercises WHERE user_id=$1 AND exercise=$2",
            user_id,
            exercise
        )

# ===== –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥ =====
# ===== –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ =====
def exercises_kb(exercises: list[str]):
    # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    exercises = [ex for ex in exercises if ex and isinstance(ex, str)]
    
    if exercises:
        kb_buttons = [[KeyboardButton(text=ex)] for ex in exercises] + [
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
            [KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")]
        ]
    else:
        kb_buttons = [
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
            [KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")]
        ]
    return ReplyKeyboardMarkup(keyboard=kb_buttons, resize_keyboard=True, one_time_keyboard=True)
# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥" =====
@dp.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥")
async def add_approach_button(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    exercises = await get_exercises(user_id)

    if not exercises:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ!",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
                    [KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(AddApproachStates.waiting_for_exercise)
        return

    kb = exercises_kb(exercises)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ:", reply_markup=kb)
    await state.set_state(AddApproachStates.waiting_for_exercise)

@dp.message(lambda m: m.text == "üîî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def ask_time(message: types.Message, state: FSMContext):
    await message.answer("üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):")
    await state.set_state(ReminderState.waiting_for_time)

MOSCOW_TZ = pytz.timezone("Europe/Moscow")

@dp.message(lambda m: m.text.startswith("–Ω–∞–ø–æ–º–Ω–∏"))
async def add_reminder(message: types.Message, state: FSMContext):
    """
    –ö–æ–º–∞–Ω–¥–∞: –Ω–∞–ø–æ–º–Ω–∏ DD.MM.YYYY HH:MM —Ç–µ–∫—Å—Ç
    –ü—Ä–∏–º–µ—Ä: –Ω–∞–ø–æ–º–Ω–∏ 15.10.2025 20:30 –°–¥–µ–ª–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üí™
    """
    parts = message.text.split(maxsplit=3)
    if len(parts) < 4:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: –Ω–∞–ø–æ–º–Ω–∏ DD.MM.YYYY HH:MM —Ç–µ–∫—Å—Ç")
        return

    date_str, time_str, reminder_text = parts[1], parts[2], parts[3]

    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ timezone-aware datetime
        dt_naive = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
        dt = MOSCOW_TZ.localize(dt_naive)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: 15.10.2025 20:30")
        return

    try:
        async with db_pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO reminders (user_id, reminder_time, text, enabled)
                VALUES ($1, $2, $3, TRUE)
            """, message.from_user.id, dt, reminder_text)
        await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {date_str} –≤ {time_str}: {reminder_text}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

    await state.clear()

@dp.message(lambda m: m.text == "üîï –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def disable_reminders(message: types.Message):
    user_id = message.from_user.id
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE reminders SET enabled = FALSE WHERE user_id = $1", user_id)
    await message.answer("üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.", reply_markup=main_kb())

# ===== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∞ =====
@dp.message(lambda m: m.text.startswith("–î–æ–±–∞–≤–∏—Ç—å:"))
async def new_exercise(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.replace("–î–æ–±–∞–≤–∏—Ç—å:", "").strip()
    parsed = parse_exercise_input(text)

    if not parsed:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –ñ–∏–º –ª–µ–∂–∞ 3 10 12 15 60")
        return

    exercise_text, approach, reps, weight = parsed
    await add_exercise_to_db(user_id, exercise_text, approach, reps, weight)
    await message.answer(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ:\n–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {exercise_text}\n–ü–æ–¥—Ö–æ–¥–æ–≤: {approach}\n–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {reps}\n–í–µ—Å: {weight} –∫–≥"
    )

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    exercises = await get_exercises(user_id)
    kb = exercises_kb(exercises)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ:", reply_markup=kb)
    await state.set_state(AddApproachStates.waiting_for_exercise)


    # –§–∏–ª—å—Ç—Ä—É–µ–º None
    exercises = [ex for ex in exercises if ex]

    kb_buttons = [[KeyboardButton(text=ex)] for ex in exercises] + \
                 [[KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
                  [KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")]] \
                 if exercises else [[KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
                                    [KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")]]

    kb = ReplyKeyboardMarkup(keyboard=kb_buttons, resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ:", reply_markup=kb)
    await state.set_state(AddApproachStates.waiting_for_exercise)


@dp.message(AddApproachStates.waiting_for_exercise)
async def process_exercise(message: types.Message, state: FSMContext):
    text = message.text.strip()
    user_id = message.from_user.id

    if text == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return

    exercises = [ex.lower() for ex in await get_exercises(user_id) if ex]
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
        await state.set_state(AddApproachStates.waiting_for_new_exercise)
        return
    elif text.lower() not in exercises:
        await message.answer("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ.")
        return

    await state.update_data(exercise=text)
    await ask_for_sets(message, state)





async def ask_for_sets(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="1Ô∏è‚É£"), KeyboardButton(text="2Ô∏è‚É£"), KeyboardButton(text="3Ô∏è‚É£")],
            [KeyboardButton(text="4Ô∏è‚É£"), KeyboardButton(text="5Ô∏è‚É£")],
            [KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")]
        ],
        resize_keyboard=True, one_time_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤:", reply_markup=kb)
    await state.set_state(AddApproachStates.waiting_for_sets)


@dp.message(AddApproachStates.waiting_for_sets)
async def process_sets(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return

    try:
        sets = int(text[0])
    except ValueError:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤ —Å –∫–Ω–æ–ø–æ–∫.")
        return

    await state.update_data(sets=sets)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ {sets} –ø–æ–¥—Ö–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 10 12):")
    await state.set_state(AddApproachStates.waiting_for_reps)


@dp.message(AddApproachStates.waiting_for_reps)
async def process_reps(message: types.Message, state: FSMContext):
    text = message.text.strip()
    try:
        reps = list(map(int, text.split()))
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return

    data = await state.get_data()
    sets = data.get("sets")
    if len(reps) != sets:
        await message.answer(f"‚ùó –í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ {sets} —á–∏—Å–µ–ª.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Å–∞
    await state.update_data(reps=reps)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 60 70 80):")
    await state.set_state(AddApproachStates.waiting_for_weight)


@dp.message(AddApproachStates.waiting_for_weight)
async def process_weight(message: types.Message, state: FSMContext):
    text = message.text.strip()
    try:
        weights = list(map(float, text.split()))
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return

    data = await state.get_data()
    reps = data['reps']
    sets = data['sets']
    exercise = data['exercise']

    # –ï—Å–ª–∏ –≤–µ—Å–æ–≤ –º–µ–Ω—å—à–µ, —á–µ–º –ø–æ–¥—Ö–æ–¥–æ–≤, –¥—É–±–ª–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
    while len(weights) < sets:
        weights.append(weights[-1])

    await save_record(message.from_user.id, exercise, sets, reps, weights)
    await message.answer(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {exercise} ‚Äî –ø–æ–¥—Ö–æ–¥—ã: {sets}, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {reps}, –≤–µ—Å: {weights}",
        reply_markup=main_kb()
    )
    await state.clear()

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ" =====
# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ" =====
@dp.message(lambda m: m.text == "üóë –£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
async def choose_exercise_to_delete(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    exercises = await get_exercises(user_id)

    # –§–∏–ª—å—Ç—Ä—É–µ–º None –∏–ª–∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    exercises = [ex for ex in exercises if ex and isinstance(ex, str)]

    if not exercises:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_kb())
        return

    kb_buttons = [[KeyboardButton(text=ex)] for ex in exercises]
    kb_buttons.append([KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")])
    kb = ReplyKeyboardMarkup(keyboard=kb_buttons, resize_keyboard=True, one_time_keyboard=True)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await state.set_state(DeleteExerciseStates.waiting_for_exercise_to_delete)


# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è =====
@dp.message(DeleteExerciseStates.waiting_for_exercise_to_delete)
async def process_exercise_deletion(message: types.Message, state: FSMContext):
    text = message.text.strip()
    user_id = message.from_user.id

    if text == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return

    exercises = await get_exercises(user_id)
    if text not in exercises:
        await message.answer("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    # –£–¥–∞–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    await delete_exercise_from_db(user_id, text)
    await message.answer(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ '{text}' —É–¥–∞–ª–µ–Ω–æ.", reply_markup=main_kb())
    await state.clear()

# ===== –ò—Å—Ç–æ—Ä–∏—è =====
@dp.message(lambda m: m.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def history(message: types.Message):
    user_id = message.from_user.id
    records = await get_user_records(user_id)
    if not records:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=main_kb())
        return

    msg_text = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n"
    for r in records:
        reps_list = r['reps'].split()
        weights_list = r['weight'].split() if r.get('weight') else ['0'] * r['sets']
        
        msg_text += f"{r['date'].strftime('%d-%m-%Y')} ‚Äî {r['exercise']}:\n"
        for i in range(r['sets']):
            rep = reps_list[i] if i < len(reps_list) else reps_list[-1]
            w = weights_list[i] if i < len(weights_list) else weights_list[-1]
            msg_text += f"{i+1}Ô∏è‚É£ {rep} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π | {w} –∫–≥\n"
        msg_text += "-"*20 + "\n"

    await message.answer(msg_text, reply_markup=main_kb())

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ üìà –ü—Ä–æ–≥—Ä–µ—Å—Å =====

from aiogram.fsm.state import State, StatesGroup

# ===== FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è =====
class ProgressStates(StatesGroup):
    waiting_for_exercise = State()

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ üìà –ü—Ä–æ–≥—Ä–µ—Å—Å =====
@dp.message(lambda m: m.text == "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def progress(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    exercises = await get_exercises(user_id)

    if not exercises:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.", reply_markup=main_kb())
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
    kb_buttons = [[KeyboardButton(text=ex)] for ex in exercises if ex]
    kb_buttons.append([KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")])
    kb = ReplyKeyboardMarkup(keyboard=kb_buttons, resize_keyboard=True, one_time_keyboard=True)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:", reply_markup=kb)
    await state.set_state(ShowProgressStates.waiting_for_exercise)


# ===== FSM –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è =====
class ShowProgressStates(StatesGroup):
    waiting_for_exercise = State()


# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è =====
@dp.message(ShowProgressStates.waiting_for_exercise)
async def show_selected_progress(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return

    user_id = message.from_user.id
    records = await get_user_records(user_id)
    if not records:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=main_kb())
        await state.clear()
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
    selected_records = [r for r in records if r['exercise'] == text]
    if not selected_records:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é.", reply_markup=main_kb())
        await state.clear()
        return

    await show_progress_graph_for_exercise(message, text, selected_records)
    await state.clear()


# ===== –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è =====
async def show_progress_graph_for_exercise(message: types.Message, exercise: str, recs: list):
    dates, avg_weights = [], []
    report_text = f"üèãÔ∏è –ü—Ä–æ–≥—Ä–µ—Å—Å: {exercise}\n\n"

    for r in recs:
        date_str = r['date'].strftime('%d-%m-%Y')
        dates.append(date_str)

        # –ü–∞—Ä—Å–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        reps = [int(x) for x in r['reps'].split()] if r['reps'] else []

        # –ü–∞—Ä—Å–∏–º –≤–µ—Å–∞
        weights = []
        if r.get('weight'):
            try:
                weights = [float(x) for x in r['weight'].split()]
            except ValueError:
                weights = []

        # –î—É–±–ª–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–µ—Å, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        while len(weights) < len(reps):
            weights.append(weights[-1] if weights else 0)

        # –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å
        avg_weight = round(sum(weights) / len(weights), 1) if weights else 0
        avg_weights.append(avg_weight)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
        reps_str = "-".join(map(str, reps)) if reps else "0"
        weights_str = "-".join(map(str, weights)) if weights else "0"
        report_text += f"{date_str} ‚Äî –ø–æ–¥—Ö–æ–¥—ã: {r['sets']} | –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {reps_str} | –≤–µ—Å(–∫–≥): {weights_str}\n"

    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
    fig, ax = plt.subplots(figsize=(8, 4), constrained_layout=True)
    ax.plot(dates, avg_weights, color="orange", marker="o", label="–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å (–∫–≥)")
    ax.set_xlabel("–î–∞—Ç–∞")
    ax.set_ylabel("–í–µ—Å (–∫–≥)", color="orange")
    ax.tick_params(axis='y', labelcolor="orange")
    plt.xticks(rotation=45, ha='right')
    ax.set_title(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {exercise}")
    ax.legend(loc="upper left")

    filename = f"progress_{message.from_user.id}_{exercise}.png"
    plt.savefig(filename, format='png', dpi=120)
    plt.close(fig)

    try:
        await message.answer_photo(FSInputFile(filename), caption=report_text, reply_markup=main_kb())
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {exercise}: {e}")

    if os.path.exists(filename):
        os.remove(filename)

@dp.message(lambda m: m.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def reminders_menu(message: types.Message):
    kb = [
        [types.KeyboardButton(text="üîî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
        [types.KeyboardButton(text="üîï –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]
    markup = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer(
        "‚è∞ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
        reply_markup=markup
    )





#—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message(lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: types.Message):
    user_id = message.from_user.id
    async with db_pool.acquire() as conn:
        records = await conn.fetch("SELECT exercise, sets, reps, weight FROM records WHERE user_id=$1", user_id)

    if not records:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_markup=main_kb())
        return

    total_workouts = len(records)
    total_sets = sum(r['sets'] for r in records)

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–µ—Å–∞ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
    weights_all = []
    exercise_reps = defaultdict(list)  # {exercise: [reps]}
    exercise_max_weight = defaultdict(float)  # {exercise: max_weight}
    for r in records:
        # –í–µ—Å
        if r['weight']:
            try:
                weights_list = [float(w) for w in r['weight'].split()]
                weights_all.extend(weights_list)
                exercise_max_weight[r['exercise']] = max(exercise_max_weight[r['exercise']], max(weights_list))
            except ValueError:
                pass

        # –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        if r['reps']:
            try:
                reps_list = [int(x) for x in r['reps'].split()]
                exercise_reps[r['exercise']].extend(reps_list)
            except ValueError:
                pass

    avg_weight = round(sum(weights_all) / len(weights_all), 1) if weights_all else 0

    msg = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {total_workouts}\n"
        f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤: {total_sets}\n"
        f"–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å –ø–æ –ø–æ–¥—Ö–æ–¥–∞–º: {avg_weight} –∫–≥\n\n"
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º:\n"
    )

    for exercise, reps in exercise_reps.items():
        avg_reps = round(sum(reps) / len(reps), 1) if reps else 0
        max_reps = max(reps) if reps else 0
        max_weight = exercise_max_weight[exercise] if exercise_max_weight.get(exercise) else 0
        msg += f"- {exercise}: —Å—Ä–µ–¥–Ω–∏–µ {avg_reps} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π, –º–∞–∫—Å {max_reps} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π, –º–∞–∫—Å –≤–µ—Å {max_weight} –∫–≥\n"

    await message.answer(msg, reply_markup=main_kb())



# ===== –†–µ—Å—Ç–∞—Ä—Ç =====
@dp.message(lambda m: m.text == "üîÑ –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞")
async def restart_bot(message: types.Message):
    await start(message)


# ===== –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π =====
from datetime import datetime
import asyncio

import pytz
from datetime import datetime, timedelta

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞
MOSCOW_TZ = pytz.timezone("Europe/Moscow")

async def reminder_scheduler(bot: Bot):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    """
    while True:
        now = datetime.now(MOSCOW_TZ).replace(second=0, microsecond=0)
        async with db_pool.acquire() as conn:
            reminders = await conn.fetch("""
                SELECT id, user_id, text FROM reminders
                WHERE enabled = TRUE AND reminder_time = $1
            """, now)

            for r in reminders:
                try:
                    await bot.send_message(r["user_id"], r["text"])
                    await conn.execute("UPDATE reminders SET enabled = FALSE WHERE id = $1", r["id"])
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {r['user_id']}: {e}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        await asyncio.sleep(60)



async def main():
    await create_db_pool()  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    asyncio.create_task(reminder_scheduler(bot))
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)




if __name__ == "__main__":
    asyncio.run(main())
