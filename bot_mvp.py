import asyncio
from datetime import datetime
from io import BytesIO

import matplotlib.pyplot as plt
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, FSInputFile

# ===== –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–∑–∞–≥–ª—É—à–∫–∏, –∑–∞–º–µ–Ω–∏—Ç–µ —Å–≤–æ–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏) =====
from db import create_pool, add_user, get_exercises, add_exercise, add_record, get_user_records, get_reminders

API_TOKEN = "8442431194:AAHqrL5Uv-boQHXf_68f6or3i1pZmJDMqy0"

# ===== FSM =====
class AddApproachStates(StatesGroup):
    waiting_for_exercise = State()
    waiting_for_new_exercise = State()
    waiting_for_sets = State()
    waiting_for_reps = State()
    waiting_for_weights = State()

# ===== –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä =====
storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=storage)

# ===== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =====
def main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥"), KeyboardButton("‚èÆ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—à–ª—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")],
            [KeyboardButton("üîç –ù–∞–π—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"), KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
            [KeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), KeyboardButton("üîÑ –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞")]
        ],
        resize_keyboard=True
    )

# ===== /start =====
@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext = None):
    await add_user(message.from_user.id, message.from_user.username)
    if state:
        await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb())

# ===== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∞ =====
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥")
async def start_add_approach(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    user_exercises = await get_exercises(user_id)
    kb_buttons = [[KeyboardButton(ex)] for ex in user_exercises] + [
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
        [KeyboardButton("‚Ü© –í –º–µ–Ω—é")]
    ]
    kb = ReplyKeyboardMarkup(keyboard=kb_buttons, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ:", reply_markup=kb)
    await state.set_state(AddApproachStates.waiting_for_exercise)

@dp.message(AddApproachStates.waiting_for_exercise)
async def process_exercise(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return
    user_id = message.from_user.id
    user_exercises = await get_exercises(user_id)
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
        await state.set_state(AddApproachStates.waiting_for_new_exercise)
        return
    if text not in user_exercises:
        await message.answer("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ.")
        return
    await state.update_data(exercise=text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤?")
    await state.set_state(AddApproachStates.waiting_for_sets)

@dp.message(AddApproachStates.waiting_for_new_exercise)
async def add_new_exercise(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return
    user_id = message.from_user.id
    await add_exercise(user_id, text)
    await state.update_data(exercise=text)
    await message.answer(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n–°–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤?")
    await state.set_state(AddApproachStates.waiting_for_sets)

@dp.message(AddApproachStates.waiting_for_sets)
async def process_sets(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ–¥—Ö–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3):")
        return
    await state.update_data(sets=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 12 10):")
    await state.set_state(AddApproachStates.waiting_for_reps)

@dp.message(AddApproachStates.waiting_for_reps)
async def process_reps(message: types.Message, state: FSMContext):
    reps_list = message.text.strip().split()
    if not all(rep.isdigit() for rep in reps_list):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 12 10):")
        return
    await state.update_data(reps=reps_list)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20 25 20):")
    await state.set_state(AddApproachStates.waiting_for_weights)

@dp.message(AddApproachStates.waiting_for_weights)
async def process_weights(message: types.Message, state: FSMContext):
    weight_list = message.text.strip().split()
    if not all(w.isdigit() for w in weight_list):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20 25 20):")
        return
    data = await state.get_data()
    exercise = data['exercise']
    sets = data['sets']
    reps = data['reps']
    await add_record(
        user_id=message.from_user.id,
        exercise=exercise,
        approach=sets,
        reps=' '.join(reps),
        weight=' '.join(weight_list),
        date=datetime.now().strftime("%Y-%m-%d %H:%M")
    )
    await message.answer(f"‚úÖ –ü–æ–¥—Ö–æ–¥—ã –¥–ª—è '{exercise}' –¥–æ–±–∞–≤–ª–µ–Ω—ã!", reply_markup=main_kb())
    await state.clear()

# ===== –ò—Å—Ç–æ—Ä–∏—è =====
@dp.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def history(message: types.Message, state: FSMContext):
    await state.clear()
    records = await get_user_records(message.from_user.id)
    if not records:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=main_kb())
        return
    msg = "üìä –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n"
    for r in records[:10]:
        approaches = int(r['approach'])
        reps_list = r['reps'].split()
        weights_list = r['weight'].split()
        msg += f"{r['date']} ‚Äî {r['exercise']}:\n"
        for i in range(approaches):
            rep = reps_list[i] if i < len(reps_list) else reps_list[-1]
            weight = weights_list[i] if i < len(weights_list) else weights_list[-1]
            msg += f"{i+1} –ø–æ–¥—Ö–æ–¥ ‚Äî {rep} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π √ó {weight} –∫–≥\n"
        msg += "‚Äî" * 20 + "\n"
    await message.answer(msg, reply_markup=main_kb())

# ===== –ü—Ä–æ–≥—Ä–µ—Å—Å =====
@dp.message(F.text == "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def progress(message: types.Message):
    records = await get_user_records(message.from_user.id)
    if not records:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.", reply_markup=main_kb())
        return
    dates = [r['date'] for r in records[-10:]]
    scores = [sum(int(r['approach']) for r in records[-10:])]  # –ø—Ä–∏–º–µ—Ä —Å—É–º–º—ã –ø–æ–¥—Ö–æ–¥–æ–≤
    plt.figure(figsize=(6, 4))
    plt.plot(dates, scores, marker='o')
    plt.title("–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–ü–æ–¥—Ö–æ–¥—ã")
    plt.grid(True)
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    photo = FSInputFile(buf, filename="progress.png")
    try:
        await bot.send_photo(message.chat.id, photo=photo, caption="üìà –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å")
    except Exception:
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫.", reply_markup=main_kb())

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics(message: types.Message):
    records = await get_user_records(message.from_user.id)
    if not records:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=main_kb())
        return
    stats = {}
    for r in records:
        stats[r['exercise']] = stats.get(r['exercise'], 0) + int(r['approach'])
    msg = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    for ex, cnt in stats.items():
        msg += f"{ex}: {cnt} –ø–æ–¥—Ö–æ–¥–æ–≤\n"
    await message.answer(msg, reply_markup=main_kb())

# ===== –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è =====
@dp.message(F.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def reminders(message: types.Message):
    reminders_list = await get_reminders(message.from_user.id)
    if not reminders_list:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=main_kb())
        return
    msg = "‚è∞ –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
    for r in reminders_list:
        msg += f"{r['days']} –≤ {r['time']}\n"
    await message.answer(msg, reply_markup=main_kb())

# ===== –†–µ—Å—Ç–∞—Ä—Ç =====
@dp.message(F.text == "üîÑ –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞")
async def restart_bot(message: types.Message):
    await start(message)

# ===== –ó–∞–ø—É—Å–∫ =====
async def main():
    await create_pool()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
