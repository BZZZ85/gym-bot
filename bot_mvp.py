import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from datetime import datetime
import asyncpg
import matplotlib.pyplot as plt
from io import BytesIO

# ======== –¢–í–û–ô –¢–û–ö–ï–ù ========
API_TOKEN = "8442431194:AAHqrL5Uv-boQHXf_68f6or3i1pZmJDMqy0"

# ======== –°–°–´–õ–ö–ê –ù–ê –ë–ê–ó–£ NEON ========
DB_URL = "postgresql://neondb_owner:npg_0eRPsTi9tJAj@ep-winter-snow-ab9o1qut-pooler.eu-west-2.aws.neon.tech/neondb?sslmode=require&channel_binding=require"

# ======== FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ========
class AddApproach(StatesGroup):
    waiting_exercise = State()
    waiting_sets = State()
    waiting_reps = State()
    waiting_weights = State()

# ======== –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ========
def main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥")],
            [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")],
        ],
        resize_keyboard=True
    )

# ======== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î ========
async def create_pool():
    pool = await asyncpg.create_pool(DB_URL)
    async with pool.acquire() as conn:
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS workouts (
            id SERIAL PRIMARY KEY,
            user_id BIGINT,
            exercise TEXT,
            sets INT,
            reps TEXT,
            weights TEXT,
            date TIMESTAMP DEFAULT NOW()
        );
        """)
    return pool

# ======== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ========
storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=storage)
pool = None

# ======== START ========
@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb())

# ======== –î–û–ë–ê–í–ò–¢–¨ –ü–û–î–•–û–î ========
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥")
async def add_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
    await state.set_state(AddApproach.waiting_exercise)

@dp.message(AddApproach.waiting_exercise)
async def get_exercise(message: types.Message, state: FSMContext):
    await state.update_data(exercise=message.text.strip())
    await message.answer("–°–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤?")
    await state.set_state(AddApproach.waiting_sets)

@dp.message(AddApproach.waiting_sets)
async def get_sets(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    await state.update_data(sets=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12 10 8):")
    await state.set_state(AddApproach.waiting_reps)

@dp.message(AddApproach.waiting_reps)
async def get_reps(message: types.Message, state: FSMContext):
    await state.update_data(reps=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 60 70 80):")
    await state.set_state(AddApproach.waiting_weights)

@dp.message(AddApproach.waiting_weights)
async def get_weights(message: types.Message, state: FSMContext):
    data = await state.get_data()
    exercise = data['exercise']
    sets = data['sets']
    reps = data['reps']
    weights = message.text.strip()

    async with pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO workouts (user_id, exercise, sets, reps, weights)
            VALUES ($1, $2, $3, $4, $5)
        """, message.from_user.id, exercise, sets, reps, weights)

    await message.answer(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ '{exercise}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb())
    await state.clear()

# ======== –ò–°–¢–û–†–ò–Ø ========
@dp.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def history(message: types.Message):
    async with pool.acquire() as conn:
        rows = await conn.fetch("""
            SELECT * FROM workouts WHERE user_id = $1 ORDER BY date DESC LIMIT 10
        """, message.from_user.id)
    if not rows:
        await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    text = "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n"
    for r in rows:
        text += f"üèãÔ∏è {r['exercise']} ‚Äî {r['sets']} –ø–æ–¥—Ö–æ–¥–æ–≤\n–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {r['reps']}\n–í–µ—Å: {r['weights']}\nüìÖ {r['date'].strftime('%d.%m.%Y %H:%M')}\n\n"
    await message.answer(text)

# ======== –ü–†–û–ì–†–ï–°–° ========
@dp.message(F.text == "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def progress(message: types.Message):
    try:
        async with pool.acquire() as conn:
            rows = await conn.fetch("""
                SELECT exercise, SUM((string_to_array(weights, ' '))[1]::int) AS total_weight
                FROM workouts
                WHERE user_id = $1
                GROUP BY exercise
            """, message.from_user.id)

        if not rows:
            await message.answer("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")
            return

        exercises = [r['exercise'] for r in rows]
        totals = [r['total_weight'] for r in rows]

        plt.figure(figsize=(6, 4))
        plt.bar(exercises, totals)
        plt.title("–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º")
        plt.xlabel("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
        plt.ylabel("–°—É–º–º–∞ –≤–µ—Å–æ–≤ (–∫–≥)")
        plt.xticks(rotation=45)
        plt.tight_layout()

        buf = BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        plt.close()

        await bot.send_photo(chat_id=message.chat.id, photo=buf, caption="üìà –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º")
    except Exception as e:
        await message.answer(f"‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")

# ======== –ó–ê–ü–£–°–ö ========
async def main():
    global pool
    pool = await create_pool()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Neon")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
