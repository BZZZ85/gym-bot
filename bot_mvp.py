import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
import asyncpg
from dotenv import load_dotenv
from collections import defaultdict
from datetime import datetime
from itertools import groupby
import matplotlib.pyplot as plt
import io
from datetime import datetime
from aiogram import types
from aiogram.types import FSInputFile
from datetime import datetime, timedelta, time
import pytz
from aiogram.types import Message
from aiogram import F
import aiohttp
from aiogram import Router, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton




# –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π .env —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
if os.path.exists("ton.env"):
    load_dotenv("ton.env")

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Railway Variables –∏–ª–∏ ton.env)
print("DEBUG: available env keys:", sorted(k for k in os.environ.keys() if "BOT" in k or "TOKEN" in k))


BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å Variables –≤ Railway –∏–ª–∏ ton.env.")
if not DATABASE_URL:
    raise ValueError("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å Variables –≤ Railway –∏–ª–∏ ton.env.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

db_pool = None
async def create_db_pool():
    global db_pool
    db_pool = await asyncpg.create_pool(DATABASE_URL)

# ===== FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è =====
class AddApproachStates(StatesGroup):
    waiting_for_exercise = State()
    waiting_for_new_exercise = State()
    waiting_for_sets = State()
    waiting_for_reps = State()
    waiting_for_weight = State() 
class DeleteExerciseStates(StatesGroup):
    waiting_for_exercise_to_delete = State()
class ReminderState(StatesGroup):
    waiting_for_time = State()
class HistoryStates(StatesGroup):
    waiting_for_exercise = State()

class StatisticsStates(StatesGroup):
    waiting_for_exercise = State()
class FoodStates(StatesGroup):
    waiting_for_grams = State()



# ===== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü =====
async def init_db():
    global db_pool
    db_pool = await asyncpg.create_pool(DATABASE_URL)

    async with db_pool.acquire() as conn:
        # ===== –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π =====
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                username TEXT
            )
        """)
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS reminders (
            user_id BIGINT PRIMARY KEY,
            time TIME,
            enabled BOOLEAN DEFAULT TRUE
        );
        """)

        # ===== –¢–∞–±–ª–∏—Ü–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π =====
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS exercises (
                user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
                exercise TEXT,
                approach INT,
                reps TEXT,
                weight TEXT,
                created_at TIMESTAMP DEFAULT now()
            )
        """)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É id, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        await conn.execute("""
            ALTER TABLE exercises 
            ADD COLUMN IF NOT EXISTS id SERIAL PRIMARY KEY;
        """)

        # ===== –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ =====
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS records (
                user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
                exercise TEXT,
                sets INT,
                reps TEXT,
                date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É weight, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        await conn.execute("""
            ALTER TABLE records 
            ADD COLUMN IF NOT EXISTS weight TEXT;
        """)
        # ===== –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π =====
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS reminders (
            user_id BIGINT PRIMARY KEY,
            time TEXT,                -- –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "09:00")
            enabled BOOLEAN DEFAULT TRUE
    )
""")



        await conn.execute("ALTER TABLE records ADD COLUMN IF NOT EXISTS weight TEXT;")


# ===== –§—É–Ω–∫—Ü–∏—è –≤—Å—Ç–∞–≤–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –ë–î —Å –≤–µ—Å–æ–º =====
async def add_exercise_to_db(user_id, exercise_text, approach=1, reps=None, weights=None):
    reps_str = " ".join(map(str, reps)) if reps else ""
    weight_str = " ".join(map(str, weights)) if weights else None
    async with db_pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO records (user_id, exercise, sets, reps, weight, date)
            VALUES ($1, $2, $3, $4, $5, NOW())
        """, user_id, exercise_text.strip(), approach, reps_str, weight_str)


async def get_exercises(user_id):
    async with db_pool.acquire() as conn:
        rows = await conn.fetch("""
            SELECT DISTINCT exercise
            FROM records
            WHERE user_id=$1
        """, user_id)
    return [r['exercise'] for r in rows if r['exercise']]

@dp.message(Command("–ø—Ä–æ–≥—Ä–µ—Å—Å"))
async def progress_command(message: Message):
    """
    –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é.
    –ü—Ä–∏–º–µ—Ä: /–ø—Ä–æ–≥—Ä–µ—Å—Å –ñ–∏–º –ª—ë–∂–∞
    """
    user_id = message.from_user.id
    parts = message.text.split(maxsplit=1)

    if len(parts) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ù–∞–ø—Ä–∏–º–µ—Ä: <b>/–ø—Ä–æ–≥—Ä–µ—Å—Å –ñ–∏–º –ª—ë–∂–∞</b>")
        return

    exercise = parts[1].strip()

    try:
        suggestion = await suggest_next_progress(user_id, exercise)
        await message.answer(suggestion, parse_mode="HTML")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å. –ü—Ä–æ–≤–µ—Ä—å, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.")
@dp.message(lambda message: message.text == "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def progress_button_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with db_pool.acquire() as conn:
        rows = await conn.fetch("""
            SELECT DISTINCT exercise
            FROM records
            WHERE user_id = $1
              AND exercise IS NOT NULL
              AND exercise != ''
              AND record_type = 'training'
        """, user_id)
        exercises = [r["exercise"] for r in rows]

    if not exercises:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üí™")
        return

    await show_progress_menu(message, exercises, state)




def parse_exercise_input(text: str):
    """
    –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: "–ñ–∏–º –ª–µ–∂–∞ 3 10 12 15 60"
    –§–æ—Ä–º–∞—Ç: <–Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è> <–ø–æ–¥—Ö–æ–¥—ã> <–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª> <–≤–µ—Å>
    """
    parts = text.strip().split()
    if len(parts) < 4:
        return None
    try:
        weight = float(parts[-1])           # –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî –≤–µ—Å
        approach = int(parts[-(len(parts)-2)])  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤
        reps = " ".join(parts[-(len(parts)-2)+1:-1])  # –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        exercise_text = " ".join(parts[:-(len(parts)-2)])  # –Ω–∞–∑–≤–∞–Ω–∏–µ
    except ValueError:
        return None
    return exercise_text, approach, reps, weight




    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ exercises (—Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π)
    await add_exercise(user_id, text)

    await state.update_data(exercise=text)
    await message.answer(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    await ask_for_sets(message, state)

# ===== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =====


def main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
            [KeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), KeyboardButton(text="üîÑ –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞")]
              # –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è
        ],
        resize_keyboard=True
    )


# ===== –†–∞–±–æ—Ç–∞ —Å –ë–î =====
async def add_user(user_id, username):
    global db_pool  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    async with db_pool.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO users (user_id, username)
            VALUES ($1, $2)
            ON CONFLICT (user_id) DO NOTHING
            """,
            user_id,
            username
        )





async def save_record(user_id, exercise, reps_list, weights_list=None):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π –ø–æ–¥—Ö–æ–¥ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å.
    reps_list ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
    weights_list ‚Äî —Å–ø–∏—Å–æ–∫ –≤–µ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ (–µ—Å–ª–∏ None, —Å—Ç–∞–≤–∏–º 0)
    """
    if weights_list is None:
        weights_list = [0] * len(reps_list)

    # –ï—Å–ª–∏ –≤–µ—Å–æ–≤ –º–µ–Ω—å—à–µ –ø–æ–¥—Ö–æ–¥–æ–≤, –¥—É–±–ª–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
    while len(weights_list) < len(reps_list):
        weights_list.append(weights_list[-1])

    async with db_pool.acquire() as conn:
        for reps, weight in zip(reps_list, weights_list):
            await conn.execute(
                """
                INSERT INTO records (user_id, exercise, sets, reps, weight, date)
                VALUES ($1, $2, 1, $3, $4, NOW())
                """,
                user_id, exercise, str(reps), str(weight)
            )


async def get_user_records(user_id):
    global db_pool
    async with db_pool.acquire() as conn:
        rows = await conn.fetch(
            "SELECT exercise, sets, reps, weight, date FROM records WHERE user_id=$1 ORDER BY date DESC LIMIT 10",
            user_id
        )
        return rows
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
food_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üçΩ –ß—Ç–æ –µ–ª")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–ª–∏–Ω—ã
AVAILABLE_WEIGHTS = [20, 15, 10, 5, 2.5, 1.25]

def round_up_weight(weight: float) -> float:
    """
    –û–∫—Ä—É–≥–ª—è–µ–º –≤–µ—Å –≤–≤–µ—Ä—Ö –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–ª–∏–Ω–∞.
    """
    higher_options = [w for w in AVAILABLE_WEIGHTS if w >= weight]
    return min(higher_options) if higher_options else max(AVAILABLE_WEIGHTS)

async def suggest_next_progress(user_id: int, exercise: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–µ—Å–∞–º –Ω–∞ –∫–∞–∂–¥—ã–π –ø–æ–¥—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.
    –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞ 5% –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö.
    """
    async with db_pool.acquire() as conn:
        # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
        row = await conn.fetchrow("""
            SELECT weight 
            FROM records 
            WHERE user_id=$1 AND exercise=$2
            ORDER BY date DESC
            LIMIT 1
        """, user_id, exercise)

    if not row or not row['weight']:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥—Ö–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è."

    try:
        last_weights = [float(w) for w in row['weight'].split()]
    except ValueError:
        return "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Å–∞—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è."

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º +5% –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö
    suggested_weights = [round_up_weight(w * 1.05) for w in last_weights]
    recommended_weights = []
    for i, (reps, weight) in enumerate(zip(last_reps, last_weights)):
        if new_reps and len(new_reps) > i:
            adjusted = adjust_weight_for_reps(weight, reps, new_reps[i])
        else:
            adjusted = math.ceil(weight * 1.05)  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ +5%
        recommended_weights.append(adjusted)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    text = "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤–µ—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –ø–æ–¥—Ö–æ–¥–∞–º:\n"
    for i, w in enumerate(recommended_weights, 1):
        text += f"–ü–æ–¥—Ö–æ–¥ {i}: {w} –∫–≥\n"

    await message.answer(text)

API_KEY = "LzcoYkPzgepXTwXcMaEm+w==yAt1WFOi0dH7cwO3"

# –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ–¥—É–∫—Ç–æ–≤
RU_TO_EN = {
    "—è–π—Ü–∞": "eggs",
    "–æ–≤—Å—è–Ω–∫–∞": "oats",
    "–º–æ–ª–æ–∫–æ": "milk",
}

# –î–Ω–µ–≤–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_diary = {}  # user_id -> —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏

# FSM –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –≥—Ä–∞–º–º
class FoodStates(StatesGroup):
    waiting_for_grams = State()



# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ =====
@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext = None):
    await add_user(message.from_user.id, message.from_user.username)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb())
    if state:
        await state.clear()

# ===== –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥ =====


def sets_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="1Ô∏è‚É£"), KeyboardButton(text="2Ô∏è‚É£"), KeyboardButton(text="3Ô∏è‚É£")],
            [KeyboardButton(text="4Ô∏è‚É£"), KeyboardButton(text="5Ô∏è‚É£")],
            [KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )



# ===== –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥ =====
# ===== –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ =====
def exercises_kb(exercises: list[str]):
    # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    exercises = [ex for ex in exercises if ex and isinstance(ex, str)]

    if exercises:
        kb_buttons = [[KeyboardButton(text=ex)] for ex in exercises] + [
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
            [KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")]
        ]
    else:
        kb_buttons = [
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
            [KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")]
        ]
    return ReplyKeyboardMarkup(keyboard=kb_buttons, resize_keyboard=True, one_time_keyboard=True)
# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥" =====
@dp.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥")
async def add_approach_button(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    exercises = await get_exercises(user_id)

    if not exercises:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ!",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
                    [KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(AddApproachStates.waiting_for_exercise)
        return

    kb = exercises_kb(exercises)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ:", reply_markup=kb)
    await state.set_state(AddApproachStates.waiting_for_exercise)

@dp.message(lambda m: m.text == "üîî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def ask_time(message: types.Message, state: FSMContext):
    await message.answer("üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):")
    await state.set_state(ReminderState.waiting_for_time)

@dp.message(ReminderState.waiting_for_time)
async def save_reminder_time(message: types.Message, state: FSMContext):
    time_text = message.text.strip()
    user_id = message.from_user.id

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–∏
        reminder_time = datetime.strptime(time_text, "%H:%M").time()

        async with db_pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO reminders (user_id, time, enabled)
                VALUES ($1, $2, TRUE)
                ON CONFLICT (user_id) DO UPDATE
                SET time = EXCLUDED.time,
                    enabled = TRUE
            """, user_id, reminder_time.strftime("%H:%M"))

        await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_text}")
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

    # –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
    import re
    if not re.match(r"^\d{2}:\d{2}$", time_text):
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä 07:30.")
        return

    async with db_pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO reminders (user_id, time, enabled)
            VALUES ($1, $2, TRUE)
            ON CONFLICT (user_id)
            DO UPDATE SET time = EXCLUDED.time, enabled = TRUE
        """, user_id, time_text)

    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_text}. –Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ üí™", reply_markup=main_kb())
    await state.clear()

@dp.message(lambda m: m.text == "üîï –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def disable_reminders(message: types.Message):
    user_id = message.from_user.id
    async with db_pool.acquire() as conn:
        await conn.execute("UPDATE reminders SET enabled = FALSE WHERE user_id = $1", user_id)
    await message.answer("üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.", reply_markup=main_kb())

# ===== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∞ =====
@dp.message(lambda m: m.text.startswith("–î–æ–±–∞–≤–∏—Ç—å:"))
async def new_exercise(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.replace("–î–æ–±–∞–≤–∏—Ç—å:", "").strip()
    parsed = parse_exercise_input(text)

    if not parsed:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –ñ–∏–º –ª–µ–∂–∞ 3 10 12 15 60")
        return

    exercise_text, approach, reps_str, weight = parsed

    # –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º reps –≤ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
    reps_list = list(map(int, reps_str.split()))

    # —Å–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –≤–µ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
    weights_list = [weight] * approach

    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ records
    await add_exercise_to_db(user_id, exercise_text, approach, reps_list, weights_list)

    await message.answer(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ:\n–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {exercise_text}\n–ü–æ–¥—Ö–æ–¥–æ–≤: {approach}\n–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {reps_list}\n–í–µ—Å: {weights_list} –∫–≥"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    exercises = await get_exercises(user_id)
    kb = exercises_kb(exercises)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ:", reply_markup=kb)
    await state.set_state(AddApproachStates.waiting_for_exercise)



    # –§–∏–ª—å—Ç—Ä—É–µ–º None
    exercises = [ex for ex in exercises if ex]

    kb_buttons = [[KeyboardButton(text=ex)] for ex in exercises] + \
                 [[KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
                  [KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")]] \
                 if exercises else [[KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
                                    [KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")]]

    kb = ReplyKeyboardMarkup(keyboard=kb_buttons, resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ:", reply_markup=kb)
    await state.set_state(AddApproachStates.waiting_for_exercise)


@dp.message(AddApproachStates.waiting_for_exercise)
async def process_exercise(message: types.Message, state: FSMContext):
    text = message.text.strip()
    user_id = message.from_user.id

    if text == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return

    exercises = [ex.lower() for ex in await get_exercises(user_id) if ex]

    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
        await state.set_state(AddApproachStates.waiting_for_new_exercise)
        return

    if text.lower() not in exercises:
        await message.answer("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ.")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ state
    await state.update_data(exercise=text)
    await ask_for_sets(message, state)







async def ask_for_sets(message: types.Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=str(i)) for i in range(1, 6)],
            [KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤:", reply_markup=kb)
    await state.set_state(AddApproachStates.waiting_for_sets)


@dp.message(AddApproachStates.waiting_for_sets)
async def process_sets(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return

    try:
        sets = int(text)
    except ValueError:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤ —Å –∫–Ω–æ–ø–æ–∫.")
        return

    await state.update_data(sets=sets)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ {sets} –ø–æ–¥—Ö–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 10 12):")
    await state.set_state(AddApproachStates.waiting_for_reps)

@dp.message(AddApproachStates.waiting_for_reps)
async def process_reps(message: types.Message, state: FSMContext):
    text = message.text.strip()
    try:
        reps_list = list(map(int, text.split()))
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return

    data = await state.get_data()
    sets = data.get("sets")
    if len(reps_list) != sets:
        await message.answer(f"‚ùó –í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ {sets} —á–∏—Å–µ–ª.")
        return

    await state.update_data(reps_list=reps_list)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 60 70 80):")
    await state.set_state(AddApproachStates.waiting_for_weight)


@dp.message(AddApproachStates.waiting_for_weight)
async def process_weight(message: types.Message, state: FSMContext):
    text = message.text.strip()
    try:
        weights_list = list(map(float, text.split()))
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return

    data = await state.get_data()
    exercise = data['exercise']
    reps_list = data['reps_list']
    sets = len(reps_list)

    # –î—É–±–ª–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–µ—Å, –µ—Å–ª–∏ –≤–µ—Å–æ–≤ –º–µ–Ω—å—à–µ –ø–æ–¥—Ö–æ–¥–æ–≤
    while len(weights_list) < sets:
        weights_list.append(weights_list[-1])

    await save_record(message.from_user.id, exercise, reps_list, weights_list)

    await message.answer(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {exercise}\n–ü–æ–¥—Ö–æ–¥–æ–≤: {sets}\n–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {reps_list}\n–í–µ—Å: {weights_list}",
        reply_markup=main_kb()
    )
    await state.clear()

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ" =====
# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ" =====
@dp.message(lambda m: m.text == "üóë –£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
async def choose_exercise_to_delete(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    exercises = await get_exercises(user_id)

    # –§–∏–ª—å—Ç—Ä—É–µ–º None –∏–ª–∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    exercises = [ex for ex in exercises if ex and isinstance(ex, str)]

    if not exercises:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_kb())
        return

    kb_buttons = [[KeyboardButton(text=ex)] for ex in exercises]
    kb_buttons.append([KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")])
    kb = ReplyKeyboardMarkup(keyboard=kb_buttons, resize_keyboard=True, one_time_keyboard=True)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await state.set_state(DeleteExerciseStates.waiting_for_exercise_to_delete)


# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è =====
@dp.message(DeleteExerciseStates.waiting_for_exercise_to_delete)
async def process_exercise_deletion(message: types.Message, state: FSMContext):
    text = message.text.strip()
    user_id = message.from_user.id

    if text == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return

    exercises = await get_exercises(user_id)
    if text not in exercises:
        await message.answer("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    # –£–¥–∞–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    
    await message.answer(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ '{text}' —É–¥–∞–ª–µ–Ω–æ.", reply_markup=main_kb())
    await state.clear()

# ===== –ò—Å—Ç–æ—Ä–∏—è =====
@dp.message(lambda m: m.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def history_menu(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    exercises = await get_exercises(user_id)

    if not exercises:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.", reply_markup=main_kb())
        return

    kb_buttons = [[KeyboardButton(text=ex)] for ex in exercises if ex]
    kb_buttons.append([KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")])
    kb = ReplyKeyboardMarkup(keyboard=kb_buttons, resize_keyboard=True, one_time_keyboard=True)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:", reply_markup=kb)
    await state.set_state(HistoryStates.waiting_for_exercise)
# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ =====
@dp.message(HistoryStates.waiting_for_exercise)
async def show_history(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return

    user_id = message.from_user.id
    records = await get_user_records(user_id)
    selected_records = [r for r in records if r['exercise'] == text]

    if not selected_records:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é.", reply_markup=main_kb())
        await state.clear()
        return

    msg_text = f"üìä –ò—Å—Ç–æ—Ä–∏—è: {text}\n\n"
    for r in selected_records:
        reps_list = r['reps'].split()
        weights_list = r['weight'].split() if r.get('weight') else ['0'] * r['sets']
        msg_text += f"{r['date'].strftime('%d-%m-%Y')} ‚Äî –ø–æ–¥—Ö–æ–¥—ã: {r['sets']}\n"
        for i in range(r['sets']):
            rep = reps_list[i] if i < len(reps_list) else reps_list[-1]
            w = weights_list[i] if i < len(weights_list) else weights_list[-1]
            msg_text += f"{i+1}Ô∏è‚É£ {rep} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π | {w} –∫–≥\n"
        msg_text += "-"*20 + "\n"

    await message.answer(msg_text, reply_markup=main_kb())
    await state.clear()

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ üìà –ü—Ä–æ–≥—Ä–µ—Å—Å =====

from aiogram.fsm.state import State, StatesGroup

# ===== FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è =====
class ProgressStates(StatesGroup):
    waiting_for_exercise = State()

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ üìà –ü—Ä–æ–≥—Ä–µ—Å—Å =====
# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ üìà –ü—Ä–æ–≥—Ä–µ—Å—Å =====
@dp.message(lambda m: m.text == "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def show_progress_menu(message: Message, exercises: list, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
    """
    keyboard = [[KeyboardButton(text=ex)] for ex in exercises] + [[KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")]]
    markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

    await message.answer("–í—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:", reply_markup=markup)
    await state.set_state(ShowProgressStates.waiting_for_exercise)



# ===== FSM –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è =====
class ShowProgressStates(StatesGroup):
    waiting_for_exercise = State()




@dp.message(ShowProgressStates.waiting_for_exercise)
async def show_selected_progress(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return

    user_id = message.from_user.id
    records = await get_user_records(user_id)
    if not records:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=main_kb())
        await state.clear()
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
    selected_records = [r for r in records if r['exercise'] == text]
    if not selected_records:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é.", reply_markup=main_kb())
        await state.clear()
        return

    # ===== –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö =====
    dates, avg_weights = [], []
    report_text = f"üèãÔ∏è –ü—Ä–æ–≥—Ä–µ—Å—Å: {text}\n\n"
    last_weights_per_set = []

    for r in selected_records:
        date_str = r['date'].strftime('%d-%m-%Y')
        dates.append(date_str)

        reps = [int(x) for x in r['reps'].split()] if r['reps'] else []
        weights = [float(x) for x in r['weight'].split()] if r.get('weight') else [0]*r['sets']

        while len(weights) < len(reps):
            weights.append(weights[-1] if weights else 0)

        avg_weight = round(sum(weights)/len(weights), 1) if weights else 0
        avg_weights.append(avg_weight)
        last_weights_per_set.append(weights)

        reps_str = "-".join(map(str, reps)) if reps else "0"
        weights_str = "-".join(map(str, weights)) if weights else "0"
        report_text += f"{date_str} ‚Äî –ø–æ–¥—Ö–æ–¥—ã: {r['sets']} | –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {reps_str} | –≤–µ—Å(–∫–≥): {weights_str}\n"

    # ===== –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–¥—Ö–æ–¥—É =====
    recommendation = ""
    if last_weights_per_set:
        last_weights = last_weights_per_set[-1]
        suggested_weights = [round(w * 1.05 + 0.49)//1 for w in last_weights]  # +5% –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
        recommendation = "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤–µ—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –ø–æ–¥—Ö–æ–¥–∞–º:\n"
        for i, w in enumerate(suggested_weights, 1):
            recommendation += f"–ü–æ–¥—Ö–æ–¥ {i}: {w} –∫–≥\n"

    # ===== –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ =====
    fig, ax = plt.subplots(figsize=(8, 4), constrained_layout=True)
    ax.plot(dates, avg_weights, color="orange", marker="o", label="–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å (–∫–≥)")
    ax.set_xlabel("–î–∞—Ç–∞")
    ax.set_ylabel("–í–µ—Å (–∫–≥)", color="orange")
    ax.tick_params(axis='y', labelcolor="orange")
    plt.xticks(rotation=45, ha='right')
    ax.set_title(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {text}")
    ax.legend(loc="upper left")

    filename = f"progress_{user_id}_{text}.png"
    plt.savefig(filename, format='png', dpi=120)
    plt.close(fig)

    # ===== –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é =====
    try:
        await message.answer_photo(
            FSInputFile(filename),
            caption=report_text + recommendation,
            reply_markup=main_kb()
        )
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")

    if os.path.exists(filename):
        os.remove(filename)

    await state.clear()


@dp.message(lambda m: m.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def reminders_menu(message: types.Message):
    kb = [
        [types.KeyboardButton(text="üîî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
        [types.KeyboardButton(text="üîï –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]
    markup = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer(
        "‚è∞ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
        reply_markup=markup
    )

@dp.message(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_from_reminders(message: types.Message, state: FSMContext):
    await start(message, state)



#—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" =====
@dp.message(lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics_menu(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    exercises = await get_exercises(user_id)

    if not exercises:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.", reply_markup=main_kb())
        return

    kb_buttons = [[KeyboardButton(text=ex)] for ex in exercises if ex]
    kb_buttons.append([KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")])
    kb = ReplyKeyboardMarkup(keyboard=kb_buttons, resize_keyboard=True, one_time_keyboard=True)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=kb)
    await state.set_state(StatisticsStates.waiting_for_exercise)



# ===== –†–µ—Å—Ç–∞—Ä—Ç =====
@dp.message(lambda m: m.text == "üîÑ –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞")
async def restart_bot(message: types.Message):
    await start(message)


# ===== –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π =====
from datetime import datetime
import asyncio

import pytz
from datetime import datetime, timedelta

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞
MOSCOW_TZ = pytz.timezone("Europe/Moscow")

async def reminder_scheduler(bot):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å —É—á—ë—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
    global db_pool
    sent_today = set()

    while True:
        if db_pool is None:
            await asyncio.sleep(5)
            continue

        # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ
        now = datetime.now(MOSCOW_TZ)
        now_str = now.strftime("%H:%M")

        try:
            async with db_pool.acquire() as conn:
                reminders = await conn.fetch("SELECT user_id, time FROM reminders WHERE enabled = TRUE")

            for r in reminders:
                reminder_time = str(r["time"]).strip()[:5]

                # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "9:5" -> "09:05")
                try:
                    reminder_time = datetime.strptime(reminder_time, "%H:%M").strftime("%H:%M")
                except Exception:
                    continue

                key = (r["user_id"], reminder_time)

                if reminder_time == now_str and key not in sent_today:
                    try:
                        await bot.send_message(
                            r["user_id"],
                            "üèãÔ∏è –í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Ä–∞–∑–º–∏–Ω–∫—É üí™"
                        )
                        print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {r['user_id']} –≤ {now_str}")
                        sent_today.add(key)
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {r['user_id']}: {e}")

            # –æ—á–∏—â–∞–µ–º –≤ –ø–æ–ª–Ω–æ—á—å
            if now.hour == 0 and now.minute == 0:
                sent_today.clear()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ reminder_scheduler: {e}")

        await asyncio.sleep(20)
# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ =====
@dp.message(StatisticsStates.waiting_for_exercise)
async def show_statistics_for_exercise(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return

    user_id = message.from_user.id
    async with db_pool.acquire() as conn:
        records = await conn.fetch(
            "SELECT sets, reps, weight FROM records WHERE user_id=$1 AND exercise=$2",
            user_id, text
        )

    if not records:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é.", reply_markup=main_kb())
        await state.clear()
        return

    total_sets = sum(r['sets'] for r in records)
    reps_all = []
    max_weight = 0

    for r in records:
        if r['reps']:
            try:
                reps_list = [int(x) for x in r['reps'].split()]
                reps_all.extend(reps_list)
            except ValueError:
                pass

        if r['weight']:
            try:
                weights_list = [float(x) for x in r['weight'].split()]
                max_weight = max(max_weight, max(weights_list))
            except ValueError:
                pass

    avg_reps = round(sum(reps_all)/len(reps_all),1) if reps_all else 0

    msg = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é '{text}':\n"
        f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤: {total_sets}\n"
        f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {avg_reps}\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å: {max_weight} –∫–≥\n"
    )

    await message.answer(msg, reply_markup=main_kb())
    await state.clear()
import math

def adjust_weight_for_reps(previous_weight: float, previous_reps: int, new_reps: int) -> float:
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –≤–µ—Å, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.
    –§–æ—Ä–º—É–ª–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –º–æ–¥–µ–ª–∏ –≠–ø–ª–∏ (Epley):
        1RM ‚âà –≤–µ—Å * (1 + –ø–æ–≤—Ç–æ—Ä—ã / 30)
    """
    if previous_reps <= 0 or new_reps <= 0:
        return previous_weight

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π 1RM
    one_rm = previous_weight * (1 + previous_reps / 30)

    # –ü–æ–¥–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –≤–µ—Å –ø–æ–¥ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    new_weight = one_rm / (1 + new_reps / 30)

    # –û–∫—Ä—É–≥–ª—è–µ–º –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É –¥–æ 1 –∫–≥
    new_weight = math.ceil(new_weight)

    return new_weight





# ===== –ó–∞–ø—É—Å–∫ =====
async def main():
    await create_db_pool()  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
    asyncio.create_task(reminder_scheduler(bot))  # <-- –ø–µ—Ä–µ–¥–∞—ë–º bot —Å—é–¥–∞
    await dp.start_polling(bot)



if __name__ == "__main__":
    asyncio.run(main())
