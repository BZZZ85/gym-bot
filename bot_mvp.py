import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import asyncpg
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

BOT_TOKEN = os.environ.get("BOT_TOKEN")
DATABASE_URL = os.environ.get("DATABASE_URL")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env –∏–ª–∏ Railway Variables.")
if not DATABASE_URL:
    raise ValueError("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env –∏–ª–∏ Railway Variables.")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
async def get_db_pool():
    return await asyncpg.create_pool(DATABASE_URL)

db_pool = asyncio.run(get_db_pool())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class TrainingStates(StatesGroup):
    waiting_for_exercise = State()
    waiting_for_sets = State()
    waiting_for_reps = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_kb():
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("‚ûï –ù–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")],
            [KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")]
        ],
        resize_keyboard=True
    )
    return kb

# –°—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def start(message: types.Message):
    async with db_pool.acquire() as conn:
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS exercises (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                exercise TEXT,
                sets INT,
                reps INT
            )
        """)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ üí™\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_kb()
    )

# –ù–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
@dp.message(F.text == "‚ûï –ù–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
async def new_training(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
    await state.set_state(TrainingStates.waiting_for_exercise)

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
@dp.message(TrainingStates.waiting_for_exercise)
async def get_exercise(message: types.Message, state: FSMContext):
    await state.update_data(exercise=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤:")
    await state.set_state(TrainingStates.waiting_for_sets)

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤
@dp.message(TrainingStates.waiting_for_sets)
async def get_sets(message: types.Message, state: FSMContext):
    try:
        sets = int(message.text)
        await state.update_data(sets=sets)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:")
        await state.set_state(TrainingStates.waiting_for_reps)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 3")

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
@dp.message(TrainingStates.waiting_for_reps)
async def get_reps(message: types.Message, state: FSMContext):
    try:
        reps = int(message.text)
        data = await state.get_data()
        async with db_pool.acquire() as conn:
            await conn.execute("""
                INSERT INTO exercises (user_id, exercise, sets, reps)
                VALUES ($1, $2, $3, $4)
            """, message.from_user.id, data["exercise"], data["sets"], reps)

        await message.answer(
            f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ '{data['exercise']}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n"
            f"–ü–æ–¥—Ö–æ–¥–æ–≤: {data['sets']}, –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {reps}",
            reply_markup=main_kb()
        )
        await state.clear()

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 10")

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
