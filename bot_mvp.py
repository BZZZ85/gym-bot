import os
import asyncio
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv("ton.env")

BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å ton.env –∏–ª–∏ Variables –≤ Railway.")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
db_pool: asyncpg.Pool | None = None

# ===== –°–æ—Å—Ç–æ—è–Ω–∏—è FSM =====
class AddApproachStates(StatesGroup):
    waiting_for_exercise = State()
    waiting_for_new_exercise = State()
    waiting_for_sets = State()
    waiting_for_reps = State()

# ===== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =====
def main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥")],
            [KeyboardButton("üìã –ú–æ–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")]
        ],
        resize_keyboard=True
    )

# ===== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î =====
async def init_db():
    global db_pool
    db_pool = await asyncpg.create_pool(DATABASE_URL)

    async with db_pool.acquire() as conn:
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                username TEXT
            )
        """)

        # –¢–∞–±–ª–∏—Ü–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS exercises (
                id SERIAL PRIMARY KEY,
                user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
                name TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT now()
            )
        """)

        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS records (
                id SERIAL PRIMARY KEY,
                user_id BIGINT REFERENCES users(user_id) ON DELETE CASCADE,
                exercise TEXT,
                sets INT,
                reps TEXT,
                date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)

# ===== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è =====
async def save_user(user_id: int, username: str):
    async with db_pool.acquire() as conn:
        await conn.execute("""
            INSERT INTO users (user_id, username)
            VALUES ($1, $2)
            ON CONFLICT (user_id) DO NOTHING
        """, user_id, username)

# ===== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è =====
async def add_exercise(user_id: int, name: str):
    async with db_pool.acquire() as conn:
        await conn.execute(
            "INSERT INTO exercises (user_id, name) VALUES ($1, $2)",
            user_id, name
        )

# ===== –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π =====
async def get_exercises(user_id: int):
    async with db_pool.acquire() as conn:
        rows = await conn.fetch("SELECT name FROM exercises WHERE user_id=$1", user_id)
        return [r["name"] for r in rows if r["name"]]

# ===== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–æ–¥—Ö–æ–¥–∞—Ö =====
async def save_record(user_id: int, exercise: str, sets: int, reps: list[int]):
    async with db_pool.acquire() as conn:
        await conn.execute(
            "INSERT INTO records (user_id, exercise, sets, reps) VALUES ($1, $2, $3, $4)",
            user_id, exercise, sets, " ".join(map(str, reps))
        )

# ===== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π =====
def exercises_kb(exercises: list[str]):
    kb_buttons = [[KeyboardButton(text=ex)] for ex in exercises if ex]
    kb_buttons.append([KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")])
    kb_buttons.append([KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=kb_buttons, resize_keyboard=True, one_time_keyboard=True)

# ===== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥–æ–≤ =====
def sets_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("1Ô∏è‚É£"), KeyboardButton("2Ô∏è‚É£"), KeyboardButton("3Ô∏è‚É£")],
            [KeyboardButton("4Ô∏è‚É£"), KeyboardButton("5Ô∏è‚É£")],
            [KeyboardButton("‚Ü© –í –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# ===== –ö–æ–º–∞–Ω–¥–∞ /start =====
@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    await save_user(message.from_user.id, message.from_user.username or "")
    await message.answer("üèã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb())
    await state.clear()

# ===== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∞ =====
@dp.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥")
async def start_add_approach(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    exercises = await get_exercises(user_id)
    kb = exercises_kb(exercises)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ:", reply_markup=kb)
    await state.set_state(AddApproachStates.waiting_for_exercise)

# ===== –í—ã–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è =====
@dp.message(AddApproachStates.waiting_for_exercise)
async def process_exercise(message: types.Message, state: FSMContext):
    text = message.text.strip()
    user_id = message.from_user.id

    if text == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return

    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
        await state.set_state(AddApproachStates.waiting_for_new_exercise)
        return

    exercises = [ex.lower() for ex in await get_exercises(user_id)]
    if text.lower() not in exercises:
        await message.answer("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ.")
        return

    await state.update_data(exercise=text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤:", reply_markup=sets_kb())
    await state.set_state(AddApproachStates.waiting_for_sets)

# ===== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è =====
@dp.message(AddApproachStates.waiting_for_new_exercise)
async def add_new_exercise(message: types.Message, state: FSMContext):
    text = message.text.strip()
    user_id = message.from_user.id

    if not text or text == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return

    await add_exercise(user_id, text)
    await state.update_data(exercise=text)
    await message.answer(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤:",
                         reply_markup=sets_kb())
    await state.set_state(AddApproachStates.waiting_for_sets)

# ===== –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥—Ö–æ–¥–æ–≤ =====
@dp.message(AddApproachStates.waiting_for_sets)
async def process_sets(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return

    try:
        sets = int(text[0])
    except ValueError:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤ —Å –∫–Ω–æ–ø–æ–∫.")
        return

    await state.update_data(sets=sets)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ {sets} –ø–æ–¥—Ö–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 12 10):")
    await state.set_state(AddApproachStates.waiting_for_reps)

# ===== –í–≤–æ–¥ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π =====
@dp.message(AddApproachStates.waiting_for_reps)
async def process_reps(message: types.Message, state: FSMContext):
    text = message.text.strip()
    try:
        reps = list(map(int, text.split()))
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        return

    data = await state.get_data()
    sets = data.get("sets")
    if len(reps) != sets:
        await message.answer(f"‚ùó –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ {sets} —á–∏—Å–µ–ª ‚Äî –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–¥—Ö–æ–¥–æ–≤.")
        return

    await save_record(message.from_user.id, data['exercise'], sets, reps)
    await message.answer(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {data['exercise']} ‚Äî {sets} –ø–æ–¥—Ö–æ–¥(–æ–≤), –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {reps}",
        reply_markup=main_kb()
    )
    await state.clear()

# ===== –ó–∞–ø—É—Å–∫ =====
async def main():
    await init_db()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
