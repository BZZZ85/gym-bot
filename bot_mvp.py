import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, FSInputFile
from io import BytesIO
from datetime import datetime
import matplotlib.pyplot as plt
from aiogram.types import FSInputFile


from db import create_pool, add_user, get_exercises, add_exercise, get_user_records, get_reminders

API_TOKEN = "8442431194:AAHqrL5Uv-boQHXf_68f6or3i1pZmJDMqy0"

storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=storage)

# ===== FSM =====
class AddApproachStates(StatesGroup):
    waiting_for_exercise = State()
    waiting_for_new_exercise = State()
    waiting_for_sets = State()
    waiting_for_reps = State()
    waiting_for_weights = State()

# ===== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =====
def main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥"), KeyboardButton(text="‚èÆ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—à–ª—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")],
            [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
            [KeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), KeyboardButton(text="üîÑ –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞")]
        ],
        resize_keyboard=True
    )

# ===== /start =====
@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext = None):
    await add_user(message.from_user.id, message.from_user.username)
    if state:
        await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb())

# ===== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∞ =====
@dp.message(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥")
async def start_add_approach(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    user_exercises = await get_exercises(user_id)
    kb_buttons = [[KeyboardButton(text=ex)] for ex in user_exercises] + [
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")],
        [KeyboardButton(text="‚Ü© –í –º–µ–Ω—é")]
    ]
    kb = ReplyKeyboardMarkup(keyboard=kb_buttons, resize_keyboard=True, one_time_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ:", reply_markup=kb)
    await state.set_state(AddApproachStates.waiting_for_exercise)

@dp.message(AddApproachStates.waiting_for_exercise)
async def process_exercise(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return
    user_id = message.from_user.id
    user_exercises = await get_exercises(user_id)
    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:")
        await state.set_state(AddApproachStates.waiting_for_new_exercise)
        return
    if text not in user_exercises:
        await message.answer("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ.")
        return
    await state.update_data(exercise=text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤?")
    await state.set_state(AddApproachStates.waiting_for_sets)

@dp.message(AddApproachStates.waiting_for_new_exercise)
async def add_new_exercise(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text == "‚Ü© –í –º–µ–Ω—é":
        await start(message, state)
        return
    user_id = message.from_user.id
    await add_exercise(user_id, text)
    await state.update_data(exercise=text)
    await message.answer(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n–°–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤?")
    await state.set_state(AddApproachStates.waiting_for_sets)

# ===== –ò—Å—Ç–æ—Ä–∏—è =====
@dp.message(lambda m: m.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
async def history(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    records = await get_user_records(user_id)
    if not records:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=main_kb())
        return
    msg_text = "üìä –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n\n"
    for r in records[:10]:
        approaches = int(r['approach'])
        reps_list = r['reps'].split()
        weights_list = r['weight'].split()
        msg_text += f"{r['date']} ‚Äî {r['exercise']}:\n"
        for i in range(approaches):
            rep = reps_list[i] if i < len(reps_list) else reps_list[-1]
            weight = weights_list[i] if i < len(weights_list) else weights_list[-1]
            msg_text += f"{i+1} –ø–æ–¥—Ö–æ–¥ ‚Äî {rep} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π √ó {weight} –∫–≥\n"
        msg_text += "‚Äî" * 20 + "\n"
    await message.answer(msg_text, reply_markup=main_kb())

# ===== –ü—Ä–æ–≥—Ä–µ—Å—Å =====
@dp.message(lambda m: m.text == "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def progress(message, bot: Bot):
    try:
        # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö, –æ–±—ã—á–Ω–æ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ë–î
        user_data = [
            {"date": datetime(2025, 10, 1), "score": 5},
            {"date": datetime(2025, 10, 2), "score": 7},
            {"date": datetime(2025, 10, 3), "score": 6},
        ]

        dates = []
        scores = []

        for r in user_data:
            # –ï—Å–ª–∏ date —É–∂–µ datetime, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            date = r['date'] if isinstance(r['date'], datetime) else datetime.strptime(r['date'], "%Y-%m-%d")
            dates.append(date.strftime("%d.%m"))
            scores.append(r['score'])

        # –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(6, 4))
        plt.plot(dates, scores, marker='o')
        plt.title("–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º")
        plt.xlabel("–î–∞—Ç–∞")
        plt.ylabel("–ë–∞–ª–ª—ã")
        plt.grid(True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ BytesIO
        buf = BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        plt.close()

        # –°–æ–∑–¥–∞–µ–º FSInputFile
        photo = FSInputFile(buf, filename="progress.png")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        await asyncio.sleep(1)
        await bot.send_photo(chat_id=message.chat.id, photo=photo, caption="üìà –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º")
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo,
            caption="üìà –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º",
            request_timeout=60
        )

    except Exception as e:
        # –õ–æ–≤–∏–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ (—Å–µ—Ç—å, —Ñ–∞–π–ª –∏ –¥—Ä.)
        await message.answer(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {e}")
# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
@dp.message(lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def statistics(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    records = await get_user_records(user_id)
    if not records:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=main_kb())
        return
    exercises = {}
    for r in records:
        exercises[r['exercise']] = exercises.get(r['exercise'], 0) + int(r['approach'])
    msg = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º:\n"
    for ex, cnt in exercises.items():
        msg += f"{ex}: {cnt} –ø–æ–¥—Ö–æ–¥–æ–≤\n"
    await message.answer(msg, reply_markup=main_kb())

# ===== –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è =====
@dp.message(lambda m: m.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def reminders(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    reminders_list = await get_reminders(user_id)
    if not reminders_list:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=main_kb())
        return
    msg = "‚è∞ –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
    for r in reminders_list:
        msg += f"{r['days']} –≤ {r['time']}\n"
    await message.answer(msg, reply_markup=main_kb())

# ===== –†–µ—Å—Ç–∞—Ä—Ç =====
@dp.message(lambda m: m.text == "üîÑ –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞")
async def restart_bot(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
    await start(message)

# ===== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ =====
async def main():
    await create_pool()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
